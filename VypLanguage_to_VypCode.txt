'''Start of the every target code:'''

#! /bin/vypint
# VYPcode: 1.0
# Generated by: xbedna73, xgajdo26

ALIAS BP $0

JUMP main

#########################################
'''
void func(void){
    //stmt
}
'''

LABEL func
    # Push BP and increment SP
    ADDI $SP, $SP, 1
    SET $BP, $SP
    ADDI $SP, $SP, 1

    //stmt

    #Restore the BP
    SET $SP, $BP
    SUBI $SP, $SP, 1
    RETURN [$SP]

##########################################
'''
int a;
'''

# Push value on stack
SET [$BP + 1], 0
ADDI $SP, $SP, 1 

##########################################
'''
int a,b,c;
'''

# Push values on stack, with zero value as default
SET [$BP + 1], 0
ADDI $SP, $SP, 1 

SET [$BP + 2], 0
ADDI $SP, $SP, 1 

SET [$BP + 3], 0
ADDI $SP, $SP, 1 

##########################################
'''
string str_a;
'''
# Create an empty string
CREATE $5, 1
SETWORD $5, 0, ""
GETWORD $5, $5, 0
SET [$BP + 1], $5
ADDI $SP, $SP, 1 

##########################################
'''
string str_a, str_b;
'''
# Create empty strings
CREATE $5, 1
SETWORD $5, 0, ""
GETWORD $5, $5, 0
SET [$BP + 1], $5
ADDI $SP, $SP, 1 

CREATE $5, 1
SETWORD $5, 0, ""
GETWORD $5, $5, 0
SET [$BP + 2], $5
ADDI $SP, $SP, 1 

##########################################
'''
a = 10;
'''

# Set value on stack
SET [$BP + 1], 10

##########################################
'''
str_a = "abc";
'''

# Create an "abc" string
CREATE $5, 1
SETWORD $5, 0, "abc"
GETWORD $5, $5, 0
SET [$BP + 1], $5

##########################################
'''
str_b = "abc";
'''

# Create an empty strings
CREATE $5, 1
SETWORD $5, 0, "abc"
GETWORD $5, $5, 0
SET [$BP + 2], $5

##########################################
'''
if (expr) {
    //if stmt
}
else {
    //esle stmt
}
'''

# Start of if, result of expr is on top of the stack
SUBI $SP, $SP, 1
JUMPNZ if, [$SP]
JUMP else
LABEL if
//if stmt
JUMP else_end

# Start of else
LABEL else
//else stmt

# End of else part
LABEL else_end

##########################################
'''
while (expr) {
    //stmt
}
'''

#Start of while, result of expr is on top of the stack
SUBI $SP, $SP, 1
LABEL start_while
JUMPNZ while, [$SP]
JUMP while_end

#Start of while body if expr is true
LABEL while
//stmt
//edit the [$SP]
JUMP start_while

#End of while
LABEL while_end

##########################################
'''
func(a,b);
'''

# Push second argument on stack
SET [$BP + 1], <value>
ADDI $SP, $SP, 1 

# Push first argument on stack
SET [$BP + 2], <value>
ADDI $SP, $SP, 1 

CALL [$SP], func

##########################################
'''
return expr
'''

#Return value in register $1
SET $1, 0


#########################################
#########################################

EXAMPLES:

#########################################
'''
int func(void){
    return 0;
}
'''

LABEL func
    # Push BP and increment SP
    ADDI $SP, $SP, 1
    SET $BP, $SP
    ADDI $SP, $SP, 1

    #Return value in register $1
    SET $1, 0

    #Restore the BP
    SET $SP, $BP
    SUBI $SP, $SP, 1
    RETURN [$SP]


##########################################
'''
int func(int a, int b){
    return a + b;
}
'''

LABEL func
    # Push BP and increment SP
    ADDI $SP, $SP, 1
    SET $BP, $SP
    ADDI $SP, $SP, 1

    # Access arguments
    SET $1, [$BP-2]
    SET $2, [$BP-3]

    #Return value in register $1
    ADDI $1, $1, $2

    #Restore the BP
    SET $SP, $BP
    SUBI $SP, $SP, 1
    RETURN [$SP]

##########################################
'''
func(a,b);
'''

# Push second argument on stack
SET [$BP + 1], 6
ADDI $SP, $SP, 1 

# Push first argument on stack
SET [$BP + 2], 8
ADDI $SP, $SP, 1 

CALL [$SP], func

##########################################
'''
string func(void){
    return "abc";
}
'''

LABEL func
    # Push BP and increment SP
    ADDI $SP, $SP, 1
    SET $BP, $SP
    ADDI $SP, $SP, 1

    # Create string to return
    CREATE $1, 1
    SETWORD $1, 0, "abc"
    GETWORD $1, $1, 0

    #Return value in register $1
    SET $1, 0

    #Restore the BP
    SET $SP, $BP
    SUBI $SP, $SP, 1
    RETURN [$SP]

##########################################
'''
string func(string str_a, string str_b){
    return str_b;
}
'''

LABEL func
    # Push BP and increment SP
    ADDI $SP, $SP, 1
    SET $BP, $SP
    ADDI $SP, $SP, 1

    # Access arguments
    SET $1, [$BP-2]
    SET $2, [$BP-3]

    #Return value in register $1
    SET $1, SET $2

    #Restore the BP
    SET $SP, $BP
    SUBI $SP, $SP, 1
    RETURN [$SP]
    