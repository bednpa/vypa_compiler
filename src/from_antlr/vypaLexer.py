# Generated from vypa.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,315,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,
        1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
        1,32,1,32,1,32,1,32,1,33,1,33,3,33,220,8,33,1,33,1,33,1,33,5,33,
        225,8,33,10,33,12,33,228,9,33,1,34,1,34,3,34,232,8,34,1,35,1,35,
        1,35,5,35,237,8,35,10,35,12,35,240,9,35,1,35,1,35,1,36,1,36,5,36,
        246,8,36,10,36,12,36,249,9,36,1,36,1,36,1,36,1,36,1,37,1,37,5,37,
        257,8,37,10,37,12,37,260,9,37,1,37,1,37,1,38,1,38,1,38,4,38,267,
        8,38,11,38,12,38,268,1,38,1,38,1,39,1,39,5,39,275,8,39,10,39,12,
        39,278,9,39,1,40,1,40,1,41,1,41,1,41,1,41,3,41,286,8,41,1,42,1,42,
        1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,
        1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,
        1,247,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,0,81,0,83,0,85,0,87,0,89,0,91,
        0,93,0,95,0,97,0,99,0,101,0,103,0,105,0,107,0,1,0,5,2,0,10,10,13,
        13,1,0,49,57,1,0,48,57,1,0,34,34,2,0,65,90,97,122,315,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,109,1,0,0,0,3,111,1,0,0,0,
        5,113,1,0,0,0,7,115,1,0,0,0,9,117,1,0,0,0,11,119,1,0,0,0,13,121,
        1,0,0,0,15,123,1,0,0,0,17,125,1,0,0,0,19,127,1,0,0,0,21,129,1,0,
        0,0,23,131,1,0,0,0,25,133,1,0,0,0,27,135,1,0,0,0,29,137,1,0,0,0,
        31,139,1,0,0,0,33,142,1,0,0,0,35,144,1,0,0,0,37,147,1,0,0,0,39,150,
        1,0,0,0,41,153,1,0,0,0,43,156,1,0,0,0,45,159,1,0,0,0,47,165,1,0,
        0,0,49,170,1,0,0,0,51,173,1,0,0,0,53,177,1,0,0,0,55,181,1,0,0,0,
        57,188,1,0,0,0,59,195,1,0,0,0,61,201,1,0,0,0,63,206,1,0,0,0,65,211,
        1,0,0,0,67,219,1,0,0,0,69,231,1,0,0,0,71,233,1,0,0,0,73,243,1,0,
        0,0,75,254,1,0,0,0,77,266,1,0,0,0,79,272,1,0,0,0,81,279,1,0,0,0,
        83,285,1,0,0,0,85,287,1,0,0,0,87,289,1,0,0,0,89,291,1,0,0,0,91,293,
        1,0,0,0,93,295,1,0,0,0,95,297,1,0,0,0,97,300,1,0,0,0,99,303,1,0,
        0,0,101,306,1,0,0,0,103,309,1,0,0,0,105,311,1,0,0,0,107,313,1,0,
        0,0,109,110,5,40,0,0,110,2,1,0,0,0,111,112,5,41,0,0,112,4,1,0,0,
        0,113,114,5,123,0,0,114,6,1,0,0,0,115,116,5,125,0,0,116,8,1,0,0,
        0,117,118,5,44,0,0,118,10,1,0,0,0,119,120,5,58,0,0,120,12,1,0,0,
        0,121,122,5,59,0,0,122,14,1,0,0,0,123,124,5,46,0,0,124,16,1,0,0,
        0,125,126,5,61,0,0,126,18,1,0,0,0,127,128,5,33,0,0,128,20,1,0,0,
        0,129,130,5,42,0,0,130,22,1,0,0,0,131,132,5,47,0,0,132,24,1,0,0,
        0,133,134,5,43,0,0,134,26,1,0,0,0,135,136,5,45,0,0,136,28,1,0,0,
        0,137,138,5,60,0,0,138,30,1,0,0,0,139,140,5,60,0,0,140,141,5,61,
        0,0,141,32,1,0,0,0,142,143,5,62,0,0,143,34,1,0,0,0,144,145,5,62,
        0,0,145,146,5,61,0,0,146,36,1,0,0,0,147,148,5,61,0,0,148,149,5,61,
        0,0,149,38,1,0,0,0,150,151,5,33,0,0,151,152,5,61,0,0,152,40,1,0,
        0,0,153,154,5,38,0,0,154,155,5,38,0,0,155,42,1,0,0,0,156,157,5,124,
        0,0,157,158,5,124,0,0,158,44,1,0,0,0,159,160,5,99,0,0,160,161,5,
        108,0,0,161,162,5,97,0,0,162,163,5,115,0,0,163,164,5,115,0,0,164,
        46,1,0,0,0,165,166,5,101,0,0,166,167,5,108,0,0,167,168,5,115,0,0,
        168,169,5,101,0,0,169,48,1,0,0,0,170,171,5,105,0,0,171,172,5,102,
        0,0,172,50,1,0,0,0,173,174,5,105,0,0,174,175,5,110,0,0,175,176,5,
        116,0,0,176,52,1,0,0,0,177,178,5,110,0,0,178,179,5,101,0,0,179,180,
        5,119,0,0,180,54,1,0,0,0,181,182,5,114,0,0,182,183,5,101,0,0,183,
        184,5,116,0,0,184,185,5,117,0,0,185,186,5,114,0,0,186,187,5,110,
        0,0,187,56,1,0,0,0,188,189,5,115,0,0,189,190,5,116,0,0,190,191,5,
        114,0,0,191,192,5,105,0,0,192,193,5,110,0,0,193,194,5,103,0,0,194,
        58,1,0,0,0,195,196,5,115,0,0,196,197,5,117,0,0,197,198,5,112,0,0,
        198,199,5,101,0,0,199,200,5,114,0,0,200,60,1,0,0,0,201,202,5,116,
        0,0,202,203,5,104,0,0,203,204,5,105,0,0,204,205,5,115,0,0,205,62,
        1,0,0,0,206,207,5,118,0,0,207,208,5,111,0,0,208,209,5,105,0,0,209,
        210,5,100,0,0,210,64,1,0,0,0,211,212,5,119,0,0,212,213,5,104,0,0,
        213,214,5,105,0,0,214,215,5,108,0,0,215,216,5,101,0,0,216,66,1,0,
        0,0,217,220,3,85,42,0,218,220,3,107,53,0,219,217,1,0,0,0,219,218,
        1,0,0,0,220,226,1,0,0,0,221,225,3,85,42,0,222,225,3,107,53,0,223,
        225,3,87,43,0,224,221,1,0,0,0,224,222,1,0,0,0,224,223,1,0,0,0,225,
        228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,68,1,0,0,0,228,226,
        1,0,0,0,229,232,5,48,0,0,230,232,3,79,39,0,231,229,1,0,0,0,231,230,
        1,0,0,0,232,70,1,0,0,0,233,238,3,103,51,0,234,237,3,81,40,0,235,
        237,3,83,41,0,236,234,1,0,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,
        236,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,
        242,3,103,51,0,242,72,1,0,0,0,243,247,3,99,49,0,244,246,9,0,0,0,
        245,244,1,0,0,0,246,249,1,0,0,0,247,248,1,0,0,0,247,245,1,0,0,0,
        248,250,1,0,0,0,249,247,1,0,0,0,250,251,3,101,50,0,251,252,1,0,0,
        0,252,253,6,36,0,0,253,74,1,0,0,0,254,258,3,95,47,0,255,257,8,0,
        0,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,
        0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,262,6,37,0,0,262,76,1,0,
        0,0,263,267,3,105,52,0,264,267,3,89,44,0,265,267,3,91,45,0,266,263,
        1,0,0,0,266,264,1,0,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,
        1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,6,38,0,0,271,78,
        1,0,0,0,272,276,7,1,0,0,273,275,7,2,0,0,274,273,1,0,0,0,275,278,
        1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,80,1,0,0,0,278,276,1,
        0,0,0,279,280,8,3,0,0,280,82,1,0,0,0,281,286,3,89,44,0,282,286,3,
        91,45,0,283,286,3,93,46,0,284,286,3,97,48,0,285,281,1,0,0,0,285,
        282,1,0,0,0,285,283,1,0,0,0,285,284,1,0,0,0,286,84,1,0,0,0,287,288,
        7,4,0,0,288,86,1,0,0,0,289,290,7,2,0,0,290,88,1,0,0,0,291,292,5,
        10,0,0,292,90,1,0,0,0,293,294,5,9,0,0,294,92,1,0,0,0,295,296,5,92,
        0,0,296,94,1,0,0,0,297,298,5,47,0,0,298,299,5,47,0,0,299,96,1,0,
        0,0,300,301,5,92,0,0,301,302,5,34,0,0,302,98,1,0,0,0,303,304,5,47,
        0,0,304,305,5,42,0,0,305,100,1,0,0,0,306,307,5,42,0,0,307,308,5,
        47,0,0,308,102,1,0,0,0,309,310,5,34,0,0,310,104,1,0,0,0,311,312,
        5,32,0,0,312,106,1,0,0,0,313,314,5,95,0,0,314,108,1,0,0,0,13,0,219,
        224,226,231,236,238,247,258,266,268,276,285,1,6,0,0
    ]

class vypaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LEFT_PARANTHESES_SMOOTH = 1
    RIGHT_PARANTHESES_SMOOTH = 2
    LEFT_PARANTHESES_SHARP = 3
    RIGHT_PARANTHESES_SHARP = 4
    COMMA = 5
    COLON = 6
    SEMICOLON = 7
    DOT = 8
    ASSIGN = 9
    NOT = 10
    MULT = 11
    DIV = 12
    ADD = 13
    MINUS = 14
    LESS = 15
    LOE = 16
    GREATER = 17
    GOE = 18
    EQ = 19
    NEQ = 20
    AND = 21
    OR = 22
    CLASS = 23
    ELSE = 24
    IF = 25
    INT_TYPE = 26
    NEW = 27
    RETURN = 28
    STRING_TYPE = 29
    SUPER = 30
    THIS = 31
    VOID = 32
    WHILE = 33
    ID = 34
    INT_VAL = 35
    STRING_VAL = 36
    BLOCK_COMMENT = 37
    LINE_COMMENT = 38
    WHITE_SPACE = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "','", "':'", "';'", "'.'", "'='", 
            "'!'", "'*'", "'/'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", 
            "'=='", "'!='", "'&&'", "'||'", "'class'", "'else'", "'if'", 
            "'int'", "'new'", "'return'", "'string'", "'super'", "'this'", 
            "'void'", "'while'" ]

    symbolicNames = [ "<INVALID>",
            "LEFT_PARANTHESES_SMOOTH", "RIGHT_PARANTHESES_SMOOTH", "LEFT_PARANTHESES_SHARP", 
            "RIGHT_PARANTHESES_SHARP", "COMMA", "COLON", "SEMICOLON", "DOT", 
            "ASSIGN", "NOT", "MULT", "DIV", "ADD", "MINUS", "LESS", "LOE", 
            "GREATER", "GOE", "EQ", "NEQ", "AND", "OR", "CLASS", "ELSE", 
            "IF", "INT_TYPE", "NEW", "RETURN", "STRING_TYPE", "SUPER", "THIS", 
            "VOID", "WHILE", "ID", "INT_VAL", "STRING_VAL", "BLOCK_COMMENT", 
            "LINE_COMMENT", "WHITE_SPACE" ]

    ruleNames = [ "LEFT_PARANTHESES_SMOOTH", "RIGHT_PARANTHESES_SMOOTH", 
                  "LEFT_PARANTHESES_SHARP", "RIGHT_PARANTHESES_SHARP", "COMMA", 
                  "COLON", "SEMICOLON", "DOT", "ASSIGN", "NOT", "MULT", 
                  "DIV", "ADD", "MINUS", "LESS", "LOE", "GREATER", "GOE", 
                  "EQ", "NEQ", "AND", "OR", "CLASS", "ELSE", "IF", "INT_TYPE", 
                  "NEW", "RETURN", "STRING_TYPE", "SUPER", "THIS", "VOID", 
                  "WHILE", "ID", "INT_VAL", "STRING_VAL", "BLOCK_COMMENT", 
                  "LINE_COMMENT", "WHITE_SPACE", "POSITIVE_DIGIT", "PRINTABLE_CHARACTER", 
                  "ESCAPE_SEQUENCE", "ANY_LETTER", "ANY_NUMBER", "END_OF_LINE", 
                  "TAB", "BACK_SLASH", "FRONT_SLASH", "DOUBLE_QUOTES", "BLOCK_COMMENT_STARTS", 
                  "BLOCK_COMMENT_ENDS", "STRING_ENCLOSING", "SPACE", "UNDERSCORE" ]

    grammarFileName = "vypa.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


